globals [ file-name ]

extensions [ pathdir csv ]

to save-map
  
  let filepath user-new-file
  
  if ( is-string? filepath )
  [
    ifelse user-yes-or-no? (word "File will be saved at: " filepath
      "\nIf this file already exists, it will be overwritten.\nAre you sure you want to save?")
    [
      export-world filepath 
      user-message "File Saved."
    ]
    [ user-message "Save Canceled. File not saved." ]
  ]
  
end


to load-map
  
  let filepath user-file
  
  if ( is-string? filepath )
  [
    ifelse ( user-yes-or-no? (word "Load File: " filepath
      "\nThis will clear your current level and replace it with the level loaded."
      "\nAre you sure you want to Load?") )
    [
      import-world filepath
      
      set-file-name filepath
      
      user-message "File Loaded."
    ]
    [ user-message "Load Canceled. File not loaded." ]
  ]
  
  analysis-setup
  
end

to set-file-name [filepath]
  
  let reversed reverse filepath
  
  let sub substring reversed 0 ( position "/" reversed )
  
  let name reverse sub
  
  set file-name name
  
end

to choose-directory-and-fix-files-in-directory [ action ]
  
  let directory user-directory
  
  if ( not ( is-string? directory or directory ) )
  [
    stop
  ]
  
  fix-files-in-directory directory action
  
end

to fix-files-in-directory [ directory-path action ]
  
  let files filter [ first ? != "." ] pathdir:list directory-path
  
  foreach files [
    
    let full-file-path ( word directory-path ? )
    
    import-world full-file-path
    
    run action
    
    export-world full-file-path
  ]
  
end

to save-rows [ filename data ]

;  if ( not is-results-directory-structure-ok? )
;  [
;    create-results-directory-structure
;  ]
  
  if ( ticks = 0 and file-exists? filename )
  [
    file-delete filename
  ] 
    
  file-open filename
    
  foreach data [
    
    let row csv:to-row ?
      
    file-print row
  ]
  
  file-close 
  
end

to-report is-results-directory-structure-ok?
  
  let main-structure-ok?
  pathdir:isDirectory? "results" and
  pathdir:isDirectory? "results/collisions" and
  pathdir:isDirectory? "results/headings" and
  pathdir:isDirectory? "results/distances" and
  pathdir:isDirectory? "results/paths" and
  pathdir:isDirectory? "results/collisions/with-movable" and
  pathdir:isDirectory? "results/headings/with-movable" and
  pathdir:isDirectory? "results/distances/with-movable" and
  pathdir:isDirectory? "results/paths/with-movable" and
  pathdir:isDirectory? "results/collisions/without-movable" and
  pathdir:isDirectory? "results/headings/without-movable" and
  pathdir:isDirectory? "results/distances/without-movable" and
  pathdir:isDirectory? "results/paths/without-movable" 
  
  
  let default-folders-ok?
  pathdir:isDirectory? "results/collisions/with-movable/default" and
  pathdir:isDirectory? "results/headings/with-movable/default" and
  pathdir:isDirectory? "results/distances/with-movable/default" and
  pathdir:isDirectory? "results/paths/with-movable/default" and
  pathdir:isDirectory? "results/collisions/without-movable/default" and
  pathdir:isDirectory? "results/headings/without-movable/default" and
  pathdir:isDirectory? "results/distances/without-movable/default" and
  pathdir:isDirectory? "results/paths/without-movable/default" 
  
  let max-distance-folders-ok?
  pathdir:isDirectory? "results/collisions/with-movable/max-distance" and
  pathdir:isDirectory? "results/headings/with-movable/max-distance" and
  pathdir:isDirectory? "results/distances/with-movable/max-distance" and
  pathdir:isDirectory? "results/paths/with-movable/max-distance" and
  pathdir:isDirectory? "results/collisions/without-movable/max-distance" and
  pathdir:isDirectory? "results/headings/without-movable/max-distance" and
  pathdir:isDirectory? "results/distances/without-movable/max-distance" and
  pathdir:isDirectory? "results/paths/without-movable/max-distance" 
  
  let circle-area-folders-ok?
  pathdir:isDirectory? "results/collisions/with-movable/circle area" and
  pathdir:isDirectory? "results/headings/with-movable/circle area" and
  pathdir:isDirectory? "results/distances/with-movable/circle area" and
  pathdir:isDirectory? "results/paths/with-movable/circle area" and
  pathdir:isDirectory? "results/collisions/without-movable/circle area" and 
  pathdir:isDirectory? "results/headings/without-movable/circle area" and
  pathdir:isDirectory? "results/distances/without-movable/circle area" and
  pathdir:isDirectory? "results/paths/without-movable/circle area" 
  
;  let rpi-folders-ok?
;  pathdir:isDirectory? "results/collisions/with-movable/rpi" and
;  pathdir:isDirectory? "results/headings/with-movable/rpi" and
;  pathdir:isDirectory? "results/distances/with-movable/rpi" and
;  pathdir:isDirectory? "results/paths/with-movable/rpi" and
;  pathdir:isDirectory? "results/collisions/without-movable/rpi" and
;  pathdir:isDirectory? "results/headings/without-movable/rpi" and
;  pathdir:isDirectory? "results/distances/without-movable/rpi" and
;  pathdir:isDirectory? "results/paths/without-movable/rpi" 
  
  let twoR-folders-ok?
  pathdir:isDirectory? "results/collisions/with-movable/2r" and
  pathdir:isDirectory? "results/headings/with-movable/2r" and
  pathdir:isDirectory? "results/distances/with-movable/2r" and
  pathdir:isDirectory? "results/paths/with-movable/2r" and
  pathdir:isDirectory? "results/collisions/without-movable/2r" and
  pathdir:isDirectory? "results/headings/without-movable/2r" and
  pathdir:isDirectory? "results/distances/without-movable/2r" and
  pathdir:isDirectory? "results/paths/without-movable/2r" 
  
  report main-structure-ok? and default-folders-ok? and max-distance-folders-ok? and circle-area-folders-ok? and twoR-folders-ok? ;rpi-folders-ok?
  
end

to create-results-directory-structure
  
  pathdir:create "results"
  pathdir:create "results/collisions" 
  pathdir:create "results/headings" 
  pathdir:create "results/distances" 
  pathdir:create "results/paths" 
  pathdir:create "results/collisions/with-movable" 
  pathdir:create "results/headings/with-movable" 
  pathdir:create "results/distances/with-movable" 
  pathdir:create "results/paths/with-movable" 
  pathdir:create "results/collisions/without-movable" 
  pathdir:create "results/headings/without-movable" 
  pathdir:create "results/distances/without-movable" 
  pathdir:create "results/paths/without-movable" 
  
  pathdir:create "results/collisions/with-movable/default" 
  pathdir:create "results/headings/with-movable/default" 
  pathdir:create "results/distances/with-movable/default" 
  pathdir:create "results/paths/with-movable/default" 
  pathdir:create "results/collisions/without-movable/default" 
  pathdir:create "results/headings/without-movable/default" 
  pathdir:create "results/distances/without-movable/default" 
  pathdir:create "results/paths/without-movable/default" 
  
  pathdir:create "results/collisions/with-movable/max-distance" 
  pathdir:create "results/headings/with-movable/max-distance" 
  pathdir:create "results/distances/with-movable/max-distance" 
  pathdir:create "results/paths/with-movable/max-distance" 
  pathdir:create "results/collisions/without-movable/max-distance" 
  pathdir:create "results/headings/without-movable/max-distance" 
  pathdir:create "results/distances/without-movable/max-distance" 
  pathdir:create "results/paths/without-movable/max-distance" 
  
  pathdir:create "results/collisions/with-movable/circle area" 
  pathdir:create "results/headings/with-movable/circle area" 
  pathdir:create "results/distances/with-movable/circle area" 
  pathdir:create "results/paths/with-movable/circle area" 
  pathdir:create "results/collisions/without-movable/circle area" 
  pathdir:create "results/headings/without-movable/circle area" 
  pathdir:create "results/distances/without-movable/circle area" 
  pathdir:create "results/paths/without-movable/circle area" 
  
;  pathdir:create "results/collisions/with-movable/rpi" 
;  pathdir:create "results/headings/with-movable/rpi" 
;  pathdir:create "results/distances/with-movable/rpi" 
;  pathdir:create "results/paths/with-movable/rpi" 
;  pathdir:create "results/collisions/without-movable/rpi" 
;  pathdir:create "results/headings/without-movable/rpi" 
;  pathdir:create "results/distances/without-movable/rpi" 
;  pathdir:create "results/paths/without-movable/rpi" 
  
  pathdir:create "results/collisions/with-movable/2r" 
  pathdir:create "results/headings/with-movable/2r" 
  pathdir:create "results/distances/with-movable/2r" 
  pathdir:create "results/paths/with-movable/2r" 
  pathdir:create "results/collisions/without-movable/2r" 
  pathdir:create "results/headings/without-movable/2r" 
  pathdir:create "results/distances/without-movable/2r" 
  pathdir:create "results/paths/without-movable/2r" 
  
end

to-report get-heading-normalizations-filename
  
  ifelse ( activate-m-objects? )
  [
    report get-filename ( word "results/headings/with-movable/" normalize-distance-with "/heading-normalizations" normalize-distance-with "-" activate-m-objects? ) 
  ]
  [
    report get-filename ( word "results/headings/without-movable/" normalize-distance-with "/heading-normalizations" normalize-distance-with "-" activate-m-objects? ) 
  ]
  
end

to-report get-distance-normalizations-filename
  
  ifelse ( activate-m-objects? )
  [
    report get-filename ( word "results/distances/with-movable/" normalize-distance-with "/distance-normalizations" normalize-distance-with "-" activate-m-objects? ) 
  ]
  [
    report get-filename ( word "results/distances/without-movable/" normalize-distance-with "/distance-normalizations" normalize-distance-with "-" activate-m-objects? ) 
  ]
  
end

to-report get-full-path-filename 
  
  ifelse ( activate-m-objects? )
  [
    report get-filename ( word "results/paths/with-movable/" normalize-distance-with "/path" normalize-distance-with "-" activate-m-objects? ) 
  ]
  [
    report get-filename ( word "results/paths/without-movable/" normalize-distance-with "/path" normalize-distance-with "-" activate-m-objects? ) 
  ]
  
end

to-report get-collisions-filename
  
  ifelse ( activate-m-objects? )
  [
    report get-filename ( word "results/collisions/with-movable/" normalize-distance-with "/collision" normalize-distance-with "-" activate-m-objects? ) 
  ]
  [
    report get-filename ( word "results/collisions/without-movable/" normalize-distance-with "/collision" normalize-distance-with "-" activate-m-objects? ) 
  ]
  
end

to output-collisioned-with 
  
  if ( not ( pathdir:isdirectory? "results" and pathdir:isdirectory? "results/collisions" ) )
  [
    pathdir:create "results"
    pathdir:create "results/collisions"
  ]
  
  let filename get-collisions-filename
  
  save-rows filename collisioned-with
  
end

to-report get-filename [ filename-part ]
  
  report ( word filename-part behaviorspace-run-number ".csv" )
  
end  
