to start-behaviour

  let phere [patch-here] of antennas

  if (any? antennas with [ [goal?] of patch-here ] )
  [
    if ( enable-user-message? )
    [ user-message ( word [who] of antennas with [ [ goal? ] of patch-here ] " Made it to goal" ) ]
    stop 
  ]
 
  ask antennas
  [
    if( any? m-objects with [ distance myself < 0.5 ] or any? patches with [ pcolor = gray and ( distance myself < 0.5 ) ] )
    [
      set number-of-collisions ( number-of-collisions + 1 )
      
      ask m-objects with [ distance myself < 0.5 ] 
      [
        set collisioned-with ( lput ( list ticks [ xcor ] of agent [ ycor ] of agent [ heading ] of agent xcor ycor who heading ) collisioned-with )
      ]
      
      ask patches with [ pcolor = gray and ( distance myself < 0.5 ) ] 
      [
        set collisioned-with ( lput ( list ticks [ xcor ] of agent [ ycor ] of agent [ heading ] of agent  pxcor pycor "P" "P" ) collisioned-with )
      ]
      
      if ( enable-user-message? )
      [ user-message (word "Dogodio se sudar na patch-u " patch-here ) ]
    ]
  ]

  agent-behaviour
  
  let markers scope-markers
  
  map-markers-to-mental-model markers ( task map-x-quadrant-first-fourth ) ( task map-y-quadrant-second-third )
  
  ask scope-markers [ die ]
  
  let decision make-decision

  use-decision decision
  
  move-objects
 
  record-current-position agent
 
  memory-fade
  trail-memory-fade

  make-environment-corrections

  ask patches with [ pcolor > memory-pcolor-min and pcolor < memory-pcolor-max ] [ set is-mapped? true ]

  tick
  
end

to use-decision [ decision ]
  
  ask ( turtle-set agent scope searcher-zero rq-antenna ) 
  [
    set heading decision
  ]

  ask agent 
  [
    fd 1
  ]
  
  ask scope
  [
    set xcor [ xcor ] of agent
    set ycor ( map-y-quadrant-second-third [ycor] of agent )
  ]
  
  ask searcher-zero 
  [
    set xcor ( map-x-quadrant-first-fourth [xcor] of agent )
    set ycor [ ycor ] of agent
  ]
  
  ask rq-antenna
  [
    set xcor map-x-quadrant-first-fourth [ xcor ] of agent 
    set ycor map-y-quadrant-second-third [ ycor ] of agent
  ]
  
end

to agent-behaviour
  
  ask agent 
  [
    while [ clock-state < 360 ] 
    [
      antenna-sweep
  
      emit-waves
    
      repeat ( scope-radius + 1 ) * ( 2.0 / resolution )
      [
        if ( any? waves )
        [
          wave-advancement
          monitor-receiver
        ]
      ]
      
      set clock-state clock-state + sweep-angle
      
      ;scope-fade
    ]
  ]
  
  set clock-state 0
  
end


to antenna-sweep

  set heading ( heading + sweep-angle )

  ask scope [ set heading [ heading ] of agent ]

end

to emit-waves

  hatch-waves 1
  [
    set heading [heading] of agent

    pu

    set xcor [ xcor ] of agent 
    set ycor [ ycor ] of agent

    set bounced? false
    set size 1
    set time 0
    set color white
    set hidden? ( not waves-visible? )
    
    set found-goal? false
  ]

end