to start-behaviour

  let phere [patch-here] of antennas

  if (any? antennas with [ [goal?] of patch-here ] )
  [
    ;; user-message ( word [who] of antennas with [ [ goal? ] of patch-here ] " Made it to goal" )
    stop 
  ]
  
  ask antennas
  [
    if( any? cars with [ distance myself < 0.5 ] or any? patches with [ pcolor = gray and ( distance myself < 0.5 ) ] )
    [
      set number-of-collisions ( number-of-collisions + 1 )
      
      ask cars with [ distance myself < 0.5 ] 
      [
        set collisioned-with ( lput self collisioned-with )
      ]
      
      ask patches with [ pcolor = gray and ( distance myself < 0.5 ) ] 
      [
        set collisioned-with ( lput self collisioned-with )
      ]
      
      user-message (word "Dogodio se sudar na patch-u " patch-here )
    ]
  ]
  
  if ( ( not any? cars ) and activate-cars? = true )
  [ setup-cars ]

  if ( ( any? cars ) and activate-cars? = false )
  [
    ask cars [ die ]

    if ( any? relation-quadrant-cars )
    [ ask relation-quadrant-cars [ die ] ]
  ]

  if ( count relation-quadrant-cars < count cars )
  [ setup-relation-quadrant-cars ]

  antenna-sweep
  emit-waves

  repeat ( scope-radius + 1 ) * ( 2.0 / resolution )
  [
    if ( any? waves )
    [
      wave-advancement
      monitor-receiver
    ]
  ]

  scope-fade


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  if ( clock-state >= 360 )
  [
    if ( anything-found? )
    [ setup-reason ]


    ifelse ( move-num-paces? = true )
    [ repeat ( num-paces ) [ basic-move-procedure ( 1 ) wait 1 ] ]
    [ basic-move-procedure ( 1 ) ]

    reset-for-new-scan

    if ( leave-trail? )
    [
      foreach phere [

        project-patch-to-trail ? ( [who] of searcher-zero ) ( task map-x-quadrant-first-fourth )
      ]
    ]

    memory-fade
    ;;
    trail-memory-fade
  ]

  ask patches with [pycor = 0 or pxcor = 0 ] [set pcolor green]

  ask patches with [ pcolor > memory-pcolor-min and pcolor < memory-pcolor-max ] [ set is-mapped? true ]

  tick
  
end