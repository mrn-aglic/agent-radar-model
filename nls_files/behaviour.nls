to start-behaviour

  ;; move this to go
  if ( pen-down? )
  [ ask antennas [ pd ] ]

  let phere [patch-here] of antennas

  if (any? antennas with [ [goal?] of patch-here ] )
  [
    if ( enable-user-message? )
    [ user-message ( word [who] of antennas with [ [ goal? ] of patch-here ] " Made it to goal" ) ]
    stop 
  ]
  
  ask antennas
  [
    if( any? cars with [ distance myself < 0.5 ] or any? patches with [ pcolor = gray and ( distance myself < 0.5 ) ] )
    [
      set number-of-collisions ( number-of-collisions + 1 )
      
      ask cars with [ distance myself < 0.5 ] 
      [
        set collisioned-with ( lput self collisioned-with )
      ]
      
      ask patches with [ pcolor = gray and ( distance myself < 0.5 ) ] 
      [
        set collisioned-with ( lput self collisioned-with )
      ]
      
      if ( enable-user-message? )
      [ user-message (word "Dogodio se sudar na patch-u " patch-here ) ]
    ]
  ]

  antenna-behaviour
  
  let markers scope-markers
  
  map-markers-to-mental-model markers ( task map-x-quadrant-first-fourth ) ( task map-y-quadrant-second-third )
  
  memory-fade
  trail-memory-fade
  
  make-decision

  memory-fade
  trail-memory-fade

  make-environment-corrections

  ask patches with [ pcolor > memory-pcolor-min and pcolor < memory-pcolor-max ] [ set is-mapped? true ]

  tick
  
end

to antenna-behaviour
  
  ask antenna 
  [
    while [ clock-state < 360 ] 
    [
      antenna-sweep
  
      emit-waves
    
      repeat ( scope-radius + 1 ) * ( 2.0 / resolution )
      [
        if ( any? waves )
        [
          wave-advancement
          monitor-receiver
        ]
      ]
      
      set clock-state clock-state + sweep-angle
      
      scope-fade
    ]
  ]
  
  set clock-state 0
  
end


to antenna-sweep

  set antenna-heading antenna-heading + sweep-angle
  
  set heading antenna-heading

  ask scope [ set heading antenna-heading ]

end

to emit-waves

  hatch-waves 1
  [
    set heading [heading] of antenna

    pu

    setxy antenna-x antenna-y
    set bounced? false
    set size 1
    set time 0
    set color white
    set hidden? ( not waves-visible? )
    
    set found-goal? false
  ]

end