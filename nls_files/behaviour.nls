to start-behaviour

  let phere [patch-here] of antennas

  if (any? antennas with [ [goal?] of patch-here ] )
  [
    ;; user-message ( word [who] of antennas with [ [ goal? ] of patch-here ] " Made it to goal" )
    stop 
  ]
  
  ask antennas
  [
    if( any? cars with [ distance myself < 0.5 ] or any? patches with [ pcolor = gray and ( distance myself < 0.5 ) ] )
    [
      set number-of-collisions ( number-of-collisions + 1 )
      
      ask cars with [ distance myself < 0.5 ] 
      [
        set collisioned-with ( lput self collisioned-with )
      ]
      
      ask patches with [ pcolor = gray and ( distance myself < 0.5 ) ] 
      [
        set collisioned-with ( lput self collisioned-with )
      ]
      
      user-message (word "Dogodio se sudar na patch-u " patch-here )
    ]
  ]

  antenna-sweep
  emit-waves

  repeat ( scope-radius + 1 ) * ( 2.0 / resolution )
  [
    if ( any? waves )
    [
      wave-advancement
      monitor-receiver
    ]
  ]

  scope-fade

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  if ( clock-state >= 360 )
  [
    if ( anything-found? )
    [ setup-reason ]

    basic-move-procedure ( 1 )

    reset-for-new-scan

    if ( leave-trail? )
    [
      foreach phere [

        project-patch-to-trail ? ( [who] of searcher-zero ) ( task map-x-quadrant-first-fourth )
      ]
    ]

    memory-fade
    ;;
    trail-memory-fade
  ]

  make-environment-corrections

  ask patches with [ pcolor > memory-pcolor-min and pcolor < memory-pcolor-max ] [ set is-mapped? true ]

  tick
  
end

to antenna-behaviour
  
  antenna-sweep
  
  emit-waves
  
end


to antenna-sweep

  ask antenna
  [
    set clock clock + sweep-angle

    set clock-state clock-state + sweep-angle

    set antenna-heading antenna-heading + sweep-angle

    if ( antenna-heading >= 360 ) [ set antenna-heading antenna-heading - 360 ]

    set heading antenna-heading

    ask scope [set heading antenna-heading]
  ]

end

to emit-waves

  create-waves 1
  [
    set heading [heading] of antenna

    setxy antenna-x antenna-y
    set bounced? false
    set size 1
    set time 0
    set color white
    set hidden? not waves-visible?
    set found-goal? false
  ]

end