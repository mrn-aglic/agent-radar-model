;; f, g, h -> procedures
to compose-decision [ f g h ]
  
  ask searchers with [ who != [ who ] of searcher-zero ]
  [
    let f_result runresult f
    let g_result runresult g
    
    set df ( runresult h f_result g_result )    
  ]
  
end

to-report get-decision 
  
  report max-one-of searchers with [ who != [ who ] of searcher-zero ] [ df ]
  
end

to-report score-function-preferred [ main-searcher object-set ]
  
  let closest_patch_distance ( get-distance-to-closest-object object-set )
  let heading_diff ( get-my-heading-diff-from-main main-searcher )
      
  report ( get-df scope-radius closest_patch_distance heading_diff )
  
end

to-report get-distance-to-closest-object [ object-set ]

  let closest-object-to-me ( get-closest-object-to-agent object-set self )
 
  report ifelse-value ( closest-object-to-me != nobody ) [ distance closest-object-to-me ] [ 1 ]

end

to-report get-my-heading-diff-from-main [ main-searcher ]
  
  report abs ( subtract-headings [ heading ] of main-searcher heading )
  
end

to-report agent-distance-to-goal [ goal ]
  
  if goal = nobody
  [ report 0 ]
  
  report distance goal
  
end

to-report one-through-x [ x ]
   
  if (x = 0)
  [ report 0 ]
  
  report 1 / x
  
end

;; called from calculate-score-function
to-report get-temp-object-set 

  report patches with [ pcolor <= memory-pcolor-max and pcolor >= memory-pcolor-min and distance searcher-zero <= area-of-interest-r ]

end

to-report get-closest-object-to-agent [ temp-object-set _agent ]
  
  report min-one-of temp-object-set [ distance _agent ]
  
end

to-report get-df [ scope_radius closest_patch_distance heading_diff ]
  
  let norm-distance-f ifelse-value ( normalize-distance-with = "default") [ task [ feature-scaling-normalize-distance closest_patch_distance ] ] 
  [ 
    ifelse-value ( normalize-distance-with = "circle area" ) 
    [ task [ normalize-closest-patch-distance-with-circle-area closest_patch_distance scope_radius ] ] 
    [
      ifelse-value ( normalize-distance-with = "rpi" ) 
      [ task [ normalize-closest-patch-distance-with-rpi closest_patch_distance scope_radius ] ] 
      [ task [ normalize-closest-patch-distance-with-max-distance closest_patch_distance ] ]
    ] 
  ]
  
  let norm-closest-patch-distance ( run-result norm-distance-f )
  
  ;let norm-closest-patch-distance ( normalize-closest-patch-distance closest_patch_distance )
  let norm-deflection-angle-value ( feature-scaling-normalize-deflection-angle heading_diff )
  
  report ( weight-param-a * norm-closest-patch-distance ) - ( weight-param-b * norm-deflection-angle-value )
    
end

to-report get-max-distance
  
  report sqrt ( max-pxcor ^ 2 + max-pycor ^ 2 ) 
  
end

to-report feature-scaling-normalize-distance [ value ]
  
  ;let norm 2 * ( ( value - minn ) / ( maxx - minn ) ) - 1
  let norm ( value - minn ) / ( maxx - minn )
  
  if norm > 1
  [
    ;user-message ( word ( minn <= value and value <= maxx ) "\n" value "\n" d-closest "\n" norm "\n" minn "\n" maxx "\n" )
  ]
  
  ;if d-closest != value and not hidden? [ show "different" ]
  ;if norm < 0 [ show self ]
  
  report norm
  
end

to-report feature-scaling-normalize-deflection-angle [ value ]
  
  report value / 180
  
end

to-report score-function-default [ main-searcher object-set ]
  
  let closest-object-to-me ( get-closest-object-to-agent object-set self )
    
  let diff abs ( subtract-headings [heading] of searcher-zero [heading] of self )  
    
  let comparison-set other searchers with [ who != [ who ] of searcher-zero ]
    
  report ( distance closest-object-to-me ) * ifelse-value ( count comparison-set with [ abs ( subtract-headings [heading] of searcher-zero [heading] of self ) < diff ] < 3 ) [ 1 ] [ -1 ] 
    
end

