to make-decision
  
  let heading-step sweep-angle
  
  let N floor ( 360 / heading-step ) 
  
  setup-decision-making N heading-step
  
  let lmax floor ( area-of-interest-r / step-size ) 
  
  explore-area-of-interest lmax
  
end

to setup-decision-making [ N heading-step ]
  
  setup-searchers N heading-step
  
end

to setup-searchers [ N heading-step ]

  let help-var 0

  repeat N
  [
    create-searchers 1
    [
      let k count searchers with [ who != [ who ] of searcher-zero ]

      configure-searchers k heading-step

      ;searcher-live-or-die
    ]
  ]

end

to configure-searchers [ k heading-step ]

  setxy searcher-zero-x searcher-zero-y
 
  set heading ( k * heading-step + [ heading ] of searcher-zero ) mod 360

  set hidden? ifelse-value hide-searchers? [ true ] [ false ]

  set on-goal? false

end

to explore-area-of-interest [ lmax ] 
  
  repeat lmax 
  [
    ask searchers with [ who != [ who ] of searcher-zero ]
    [
      let is-valid? searcher-is-valid?
      
      ifelse ( is-valid? )
      [ 
      ]
      [
        die
      ]
    ]
  ]
  
end

to-report searcher-is-valid?

  let cells-to-test patches with [ distance myself < 1 ]
  
  report all? cells-to-test [ pcolor = black or goal? ]
 
end

to-report should-searcher-die? [p]

  report p = nobody or ( [pcolor] of p != black and not [goal?] of p )

end

to-report death-condition

  report pcolor != black and not goal?

end



to setup-reason

  ;set num-paces scope-radius ;;- 2

  ;start-reasoning

  ;ask searchers with [who != [who] of searcher-zero] [ die ]

end