to-report make-decision
  
  let heading-step sweep-angle
  
  let N floor ( 360 / heading-step ) 
  
  setup-decision-making N heading-step
  
  let lmax floor ( area-of-interest-r / step-size ) 
  
  explore-area-of-interest lmax N
  
  let result ifelse-value ( any? searchers with [ who != [ who ] of searcher-zero ] ) [ choose-based-on-score ] [ choose-based-on-score-from-history ] 
  
  cleanup-decision-making
  
  report result
  
end

to setup-decision-making [ N heading-step ]
  
  setup-searchers N heading-step
  
end

to setup-searchers [ N heading-step ]

  let help-var 0

  repeat N
  [
    create-searchers 1
    [
      set k count searchers with [ who != [ who ] of searcher-zero ]

      configure-searchers heading-step
    ]
  ]
  
  ask searchers with [ who != [ who ] of searcher-zero ]
  [
    let is-valid? searcher-is-valid?
      
    ifelse ( is-valid? ) 
    [ 
      calculate-score-function 
    ] 
    [ die ]
  ]

end

to configure-searchers [ heading-step ]

  setxy searcher-zero-x searcher-zero-y
 
  set heading ( k * heading-step + [ heading ] of searcher-zero ) mod 360

  set hidden? ifelse-value hide-searchers? [ true ] [ false ]

  set on-goal? false

end

to explore-area-of-interest [ lmax N ] 
  
  let F [ ( list heading 0 ) ] of searchers with [ who != [ who] of searcher-zero ]
  
  repeat lmax 
  [
    ask searchers with [ who != [ who ] of searcher-zero ]
    [
      let is-valid? searcher-is-valid?
      
      ifelse ( is-valid? )
      [
        fd 1 
        
        calculate-score-function
        
        let new-item ( list heading df ) 
        
        set F replace-item ( k - 1 ) F new-item
      ]
      [
        die
      ]
    ]
  ]
  
  show length F
  show F
  
end

to-report searcher-is-valid?

  let cells-to-test patches with [ distance myself < 1 ]
  
  report all? cells-to-test [ pcolor = black or goal? ]
 
end

to cleanup-decision-making
  
  ask searchers with [ who != [ who ] of searcher-zero ] [ die ]
  
end

to calculate-score-function
  
  ifelse ( decision-function = "function" )
  [
    let object-set get-temp-object-set 

    set df ( score-function-preferred searcher-zero object-set )
  ]
  [
    set df ( score-function-default searcher-zero get-temp-object-set )
  ]
  
end

to-report choose-based-on-score
  
  let schs searchers with [ who != [ who ] of searcher-zero ]
  
  report [ heading ] of max-one-of schs [ df ]
  
end

to-report choose-based-on-score-from-history
  
  report 0
  
end


;; TO DO: Decide what to do with this
to go-to-goal [ searchers-on-goal ]

  ;set new-heading [heading] of one-of searchers-on-goal

  ;set antenna-heading new-heading

end

to-report should-searcher-die? [p]

  report p = nobody or ( [pcolor] of p != black and not [goal?] of p )

end

to-report death-condition

  report pcolor != black and not goal?

end

