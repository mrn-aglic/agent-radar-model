to-report make-decision
  
  let heading-step sweep-angle
  
  let N floor ( 360 / heading-step ) 
  
  setup-decision-making N heading-step
  
  let lmax floor ( area-of-interest-r / step-size ) 
  
  explore-area-of-interest lmax N
  
  ;; TO DO: What would be result if f_array has all default values - i.e. searcher-zero is surrounded by walls
  let result ifelse-value ( any? searchers with [ who != [ who ] of searcher-zero ] ) [ choose-based-on-score ] [ choose-based-on-score-from-history ] 
  
  flush-record-distances
  flush-record-headings
  
  cleanup-decision-making
  
  report result
  
end

to setup-decision-making [ N heading-step ]
  
  setup-searchers N heading-step
  
end

to setup-searchers [ N heading-step ]

  let help-var 0

  repeat N
  [
    create-searchers 1
    [
      hide-turtle
      
      set k count searchers with [ who != [ who ] of searcher-zero ]

      configure-searchers heading-step
      
      show-turtle
    ]
  ]

end

to configure-searchers [ heading-step ]

  set xcor [ xcor ] of searcher-zero
  set ycor [ ycor ] of searcher-zero
 
  set heading ( k * heading-step + [ heading ] of searcher-zero ) mod 360

  set hidden? ifelse-value hide-searchers? [ true ] [ false ]

  set on-goal? false

end

to explore-area-of-interest [ lmax N ] 
  
  set f_array [ ( list heading 0 ) ] of searchers with [ who != [ who] of searcher-zero ]
  
  let obj-set get-temp-object-set
    
  foreach n-values lmax [ ? ] 
  [
    ask searchers with [ who != [ who ] of searcher-zero ]
    [
      fd 1 
      
      if ( not searcher-is-valid? ) 
      [
        die
      ]
      
      set d-closest get-distance-to-closest-object obj-set
    ]
    
    set ms [ d-closest ] of searchers with [ who != [ who ] of searcher-zero ]
    
    set minn ifelse-value ( empty? ms ) [ 0 ] [ min ms ]
    set maxx ifelse-value ( empty? ms ) [ 2 * area-of-interest-r ] [ max ms ]
    
    set minn ifelse-value ( minn = maxx ) [ 0 ] [ minn ]
          
    ask searchers with [ who != [ who ] of searcher-zero ]
    [
      calculate-score-function obj-set true
        
      let new-item ( list heading df ) 
        
      set f_array replace-item ( k - 1 ) f_array new-item     
    ]
  ]
  
end

to-report searcher-is-valid?

  let cells-to-test patches with [ distance myself < 1 and distance searcher-zero <= area-of-interest-r  ]

  report all? cells-to-test [ pcolor = black or goal? ]
 
end

to cleanup-decision-making
  
  ask searchers with [ who != [ who ] of searcher-zero ] [ die ]
  
end

to calculate-score-function [ object-set record? ]
  
  ifelse ( decision-function = "function" )
  [
    set df ( score-function-preferred searcher-zero object-set )
    
    if ( record? )
    [
      let normalization get-normalization-function scope-radius d-closest
      
      let norm-dis runresult normalization
      
      let norm-h ( feature-scaling-normalize-deflection-angle ( get-my-heading-diff-from-main searcher-zero ) )
    
      record-normalized-distance norm-dis 
      
      record-normalized-heading norm-h
    ]
  ]
  [
    set df ( score-function-default searcher-zero object-set )
    
    ;; DOES IT NEED NORMALIZATION?
  ]
  
  if ( any? patches with [ goal? ] )
  [
    let gd ( distance min-one-of patches with [ goal? ] [ distance myself ] )
      
    set df ( df + ( one-through-x gd ) )
  ]
  
end

to-report choose-based-on-score
  
  let schs searchers with [ who != [ who ] of searcher-zero ]
  
  report [ heading ] of max-one-of schs [ df ]
  
end

to-report choose-based-on-score-from-history
  
  let mmax max map last f_array
  
  report first one-of filter [ last ? = mmax ] f_array
  
end
